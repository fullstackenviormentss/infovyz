(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.infovyz = factory());
}(this, (function () { 'use strict';

// av's main function is a getter-setter-combo
// it expects a default value and a validation function
// the validation function should return the validated value or throw an exception
// it shouldn't return 'false' for non-validating values
var av = function (i, validate){
  // we store the value in private scope
  var _i;
  // our getter-setter-combo including validation
  var me = function (d){
    if (!arguments.length) {
      if (typeof _i === 'object'){
        var o= {};
        for (var prop in _i){
          o[prop] = _i[prop]();
        }
        return o;
      } else {
        return _i;
      }
    }
    _i = validate(d);
    // if _i is an object we expose the getter/setter methods of its attributes
    if (typeof _i === 'object'){
      for (var prop_object in _i){
        me[prop_object] = _i[prop_object];
      }
    }
  };
  // we initialize the getter-setter-combo with the provided value
  me(i);
  // return the getter-setter-combo (allows chaining, among other things)
  return me;
};

// isValid allows you to test if a value (v) is a valid type (t)
av.isValid = function (t, v){
  try {
    t(v);
    return true;
  } catch (err) {
    return false;
  }
};

// a boolean type and its validation function
av.boolean = function (i){
  // we return the av-factory which requires an initial value and 
  // the validation function
  return av(i, function (d){
    if (typeof d === 'boolean') {
      return d;
    } else throw 'd is not boolean';
  });
};

// http://stackoverflow.com/a/20779354/2266116
var isInteger = function (nVal){
  return typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;
};

av.int = function (i){
  return av(i, function (d){
    if(!isInteger(d)) {
      throw 'd is not an integer';
    }
    return d;
  });
};

av.float = function (i){
  return av(i, function(d){
    if(typeof d !== 'number') {
      throw 'd is not a number';
    }
    return d;
  });
};

av.string = function (i){
  return av(i, function (d){
    if (typeof d === 'string') {
      return d;
    } else throw 'd is not a string';
  });
};

av.collection = function (i){
  return av(i, function (d){
    if (d && d.constructor === Array) {
      return d;
    } else throw 'not an array';
  });
};

av.map = function (i, o){
  return av(i, function (d){
    if (typeof d === 'object'){
      var _i = {};
      for (var prop in o){
        _i[prop] = o[prop](d[prop]);
      }
      return _i;
    } else throw 'not a valid object';
  });
};

var map = function(d3) {
  return function(id) {
    var av$$1 = av;
    var autozoom = true;
    var transitionDuration = 500; // ms
    var pi = Math.PI;
    var tau = 2 * pi;
    var radius = d3.scalePow()
        .domain([1, 10])
        .range([3, 15]);

    var strokeWidth = 0.5;

    var wrapper = d3.select(id);
    var width = wrapper.node().clientWidth;
    var height = wrapper.node().clientHeight;
    var size = [width, height];

    var tilesConfig = {
      url: 'https://maps.wikimedia.org/osm-intl/',
      extension: '.png',
      switchXY: false,
      factor: 256
    };

    var projection = d3.geoMercator()
        .scale(1 / tau)
        .translate([0, 0]);

    var path = d3.geoPath()
        .projection(projection);  

    var tile = d3.tile()
        .size(size);

    var zoom = d3.zoom()
        .scaleExtent([1 << 9, 1 << 14])
        .on('zoom', zoomed);

    var svg = wrapper.select('svg');
    
    if (svg.empty()) {
      svg = wrapper.append('svg')
          .classed('infovyz-map', true)
          .attr('width', width)
          .attr('height', height);
    }

    var raster = svg.append('g').classed('tiles', true);
    var vector = svg.append('g').classed('overlay', true);
    var legend = svg.append('g').classed('legend', true);

    var previousTransform;
    function zoomed() {
      var transform = previousTransform = d3.event.transform;

      var tiles = tile
          .scale(transform.k)
          .translate([transform.x, transform.y])
          ();

      vector
        .attr('transform', transform);
      
      vector.selectAll('circle.active')
        .attr('transform', function(d) { return 'translate(' + projection(d.geometry.coordinates) + ')'; })
        .attr('r', function(d) {
          return radius(d.properties.value || 1) / transform.k;
        })
        .attr('stroke-width', strokeWidth / transform.k);

      var image = raster
        .attr('transform', stringify(tiles.scale, tiles.translate))
        .selectAll('image')
        .data(tiles, function(d) { return d; });

      image
        .exit().remove();

      image.enter().append('image')
          .attr('xlink:href', function(d) { return tilesConfig.url + d[2] + '/' + d[0] + '/' + d[1] + tilesConfig.extension; })
          .attr('x', function(d) { return d[0] * tilesConfig.factor; })
          .attr('y', function(d) { return d[1] * tilesConfig.factor; })
          .attr('width', tilesConfig.factor)
          .attr('height', tilesConfig.factor);
    }

    function stringify(scale, translate) {
      var k = scale / tilesConfig.factor;
      var r = scale % 1 ? Number : Math.round;
      return 'translate(' + r(translate[0] * scale) + ',' + r(translate[1] * scale) + ') scale(' + k + ')';
    }

    var latitude = function(i) {
      return av$$1(i, function (d){
        var l = av$$1.float(d)();
        if (l < -90 || l > 90) {
          throw new Error('latitude must be a number between -90 and 90.');
        }
        return d;
      });
    };

    var longitude = function(i) {
      return av$$1(i, function (d){
        var l = av$$1.float(d)();
        if (l < -180 || l > 180) {
          throw new Error('longitude must be a number between -180 and 180.');
        }
        return d;
      });
    };

    var Location = function(i) {
      return av$$1.map(i, {
        id: av$$1.string,
        // commented for now because examples use data without values
        // and avocado doesn't support optional attributes yet.
        // value: av.int,
        longitude: longitude,
        latitude: latitude
      });
    };

    var transformData = function(d) {
      return {
        type: 'FeatureCollection',
        features: d.map(function(el) {
          Location(el);
          return {
            type: 'Feature',
            id: el.id,
            properties: el,
            geometry: {type: 'Point', coordinates: [+el.longitude, +el.latitude]}
          };
        })
      };
    };

    var map = function(d) {
      var newWidth = wrapper.node().clientWidth;
      var newHeight = wrapper.node().clientHeight;
      var _transitionDuration = transitionDuration;

      if (width !== newWidth || height !== newHeight) {
        width = newWidth;
        height = newHeight;
        _transitionDuration = 0;
        svg
          .attr('width', width)
          .attr('height', height);
      }

      if (typeof vector.datum() === 'undefined') {
        _transitionDuration = 0;
      }
      var data = (typeof d !== 'undefined') ? transformData(d) : vector.datum();

      // Compute the projected center.
      var bounds  = path.bounds(data);
      var bx = bounds[1][0] - bounds[0][0];
      var by = bounds[1][1] - bounds[0][1];
      var tx = (bounds[0][0] + bounds[1][0]) / 2;
      var ty = (bounds[0][1] + bounds[1][1]) / 2;
      var scale = 0.8 * Math.min(width / bx, height / by);

      svg.call(zoom);

      if (!autozoom && typeof vector.datum() === 'undefined') {
        svg
          .call(
            zoom.transform,
            d3.zoomIdentity
              .translate(width / 2, height / 2)
              .scale(1 << 10)
              .translate(0, 0)
          );
      }

      if (autozoom) {
        svg
          .transition()
          .duration(_transitionDuration)
          .call(
            zoom.transform,
            d3.zoomIdentity
              .translate(width / 2, height / 2)
              .scale(scale)
              .translate(-tx, -ty)
          );
      }

      vector.datum(data);

      var features = (typeof data !== 'undefined') ? data.features : [];

      var valueExtent = d3.extent(features.map(function(f) {
        return f.properties.value || 1;
      }));

      radius = d3.scalePow()
        .domain(valueExtent)
        .range([3, 15]);

      var bubble = vector
        .selectAll('circle')
        .data(features, function(d) { return d.id; });

      bubble
        .exit()
        .classed('active', false)
        .transition()
        .attr('r', 0)
        .attr('stroke-width', 0)
        .remove();

      scale = (previousTransform) ? previousTransform.k : scale;
      bubble.enter().append('circle')
        .classed('active', true)
        .attr('transform', function(d) { return 'translate(' + projection(d.geometry.coordinates) + ')'; })
        .attr('r', 0)
        .attr('stroke-width', 0)
        .transition()
        .attr('r', function(d) {
          return radius(d.properties.value || 1) / scale;
        })
        .attr('stroke-width', strokeWidth / scale);

      legend
        .attr('transform', 'translate(' + (width - radius(valueExtent[1]) - 10) + ',' + (height - 10) + ')');

      var legendElement = legend.selectAll('g')
        .data(valueExtent)
        .enter().append('g');

      legendElement.append('circle');

      legend.selectAll('circle')
        .data(valueExtent)
        .attr('cy', function(d) { return -(radius(d)); })
        .attr('r', function(d) { return radius(d); });

      legendElement.append('text');

      legend.selectAll('text')
        .data(valueExtent)
        .attr('y', function(d) { return -2 * (radius(d)); })
        .attr('dy', function() { return '-.2em'; })
        .text(function(d){ return d; });

      return map;
    };

    map.panTo = function(d) {
      if (typeof d === 'undefined') {
        throw new Error('map.panTo() called without location.');
      }

      if (typeof d.longitude === 'undefined' || typeof d.latitude === 'undefined') {
        throw new Error('map.panTo() called without valid location.');
      }

      var t = projection([d.longitude, d.latitude]);
      var z = d.zoom || 10;
      svg
        .transition()
        .duration(transitionDuration)
        .call(
          zoom.transform,
          d3.zoomIdentity
            .translate(width / 2, height / 2)
            .scale(1 << z)
            .translate(-t[0], -t[1])
        );
    };

    map.autozoom = function(d) {
      if (arguments.length === 0) return autozoom;
      autozoom = d;
      return map;
    };

    map.transitionDuration = function(d) {
      if (arguments.length === 0) return transitionDuration;
      transitionDuration = d;
      return map;
    };

    return map;
  };
};

var index = {
  version: '1.0.0-beta.7',
  map: map
};

return index;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9hdm9jYWRvLXR5cGUtY2hlY2tlci9zcmMvYXZvY2Fkby5qcyIsIi4uL3NyYy9tYXAuanMiLCIuLi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhdidzIG1haW4gZnVuY3Rpb24gaXMgYSBnZXR0ZXItc2V0dGVyLWNvbWJvXG4vLyBpdCBleHBlY3RzIGEgZGVmYXVsdCB2YWx1ZSBhbmQgYSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4vLyB0aGUgdmFsaWRhdGlvbiBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRoZSB2YWxpZGF0ZWQgdmFsdWUgb3IgdGhyb3cgYW4gZXhjZXB0aW9uXG4vLyBpdCBzaG91bGRuJ3QgcmV0dXJuICdmYWxzZScgZm9yIG5vbi12YWxpZGF0aW5nIHZhbHVlc1xudmFyIGF2ID0gZnVuY3Rpb24gKGksIHZhbGlkYXRlKXtcbiAgLy8gd2Ugc3RvcmUgdGhlIHZhbHVlIGluIHByaXZhdGUgc2NvcGVcbiAgdmFyIF9pO1xuICAvLyBvdXIgZ2V0dGVyLXNldHRlci1jb21ibyBpbmNsdWRpbmcgdmFsaWRhdGlvblxuICB2YXIgbWUgPSBmdW5jdGlvbiAoZCl7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBpZiAodHlwZW9mIF9pID09PSAnb2JqZWN0Jyl7XG4gICAgICAgIHZhciBvPSB7fTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBfaSl7XG4gICAgICAgICAgb1twcm9wXSA9IF9pW3Byb3BdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2k7XG4gICAgICB9XG4gICAgfVxuICAgIF9pID0gdmFsaWRhdGUoZCk7XG4gICAgLy8gaWYgX2kgaXMgYW4gb2JqZWN0IHdlIGV4cG9zZSB0aGUgZ2V0dGVyL3NldHRlciBtZXRob2RzIG9mIGl0cyBhdHRyaWJ1dGVzXG4gICAgaWYgKHR5cGVvZiBfaSA9PT0gJ29iamVjdCcpe1xuICAgICAgZm9yICh2YXIgcHJvcF9vYmplY3QgaW4gX2kpe1xuICAgICAgICBtZVtwcm9wX29iamVjdF0gPSBfaVtwcm9wX29iamVjdF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvLyB3ZSBpbml0aWFsaXplIHRoZSBnZXR0ZXItc2V0dGVyLWNvbWJvIHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlXG4gIG1lKGkpO1xuICAvLyByZXR1cm4gdGhlIGdldHRlci1zZXR0ZXItY29tYm8gKGFsbG93cyBjaGFpbmluZywgYW1vbmcgb3RoZXIgdGhpbmdzKVxuICByZXR1cm4gbWU7XG59O1xuXG4vLyBpc1ZhbGlkIGFsbG93cyB5b3UgdG8gdGVzdCBpZiBhIHZhbHVlICh2KSBpcyBhIHZhbGlkIHR5cGUgKHQpXG5hdi5pc1ZhbGlkID0gZnVuY3Rpb24gKHQsIHYpe1xuICB0cnkge1xuICAgIHQodik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gYSBib29sZWFuIHR5cGUgYW5kIGl0cyB2YWxpZGF0aW9uIGZ1bmN0aW9uXG5hdi5ib29sZWFuID0gZnVuY3Rpb24gKGkpe1xuICAvLyB3ZSByZXR1cm4gdGhlIGF2LWZhY3Rvcnkgd2hpY2ggcmVxdWlyZXMgYW4gaW5pdGlhbCB2YWx1ZSBhbmQgXG4gIC8vIHRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gIHJldHVybiBhdihpLCBmdW5jdGlvbiAoZCl7XG4gICAgaWYgKHR5cGVvZiBkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBkO1xuICAgIH0gZWxzZSB0aHJvdyAnZCBpcyBub3QgYm9vbGVhbic7XG4gIH0pO1xufTtcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjA3NzkzNTQvMjI2NjExNlxudmFyIGlzSW50ZWdlciA9IGZ1bmN0aW9uIChuVmFsKXtcbiAgcmV0dXJuIHR5cGVvZiBuVmFsID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShuVmFsKSAmJiBuVmFsID4gLTkwMDcxOTkyNTQ3NDA5OTIgJiYgblZhbCA8IDkwMDcxOTkyNTQ3NDA5OTIgJiYgTWF0aC5mbG9vcihuVmFsKSA9PT0gblZhbDtcbn07XG5cbmF2LmludCA9IGZ1bmN0aW9uIChpKXtcbiAgcmV0dXJuIGF2KGksIGZ1bmN0aW9uIChkKXtcbiAgICBpZighaXNJbnRlZ2VyKGQpKSB7XG4gICAgICB0aHJvdyAnZCBpcyBub3QgYW4gaW50ZWdlcic7XG4gICAgfVxuICAgIHJldHVybiBkO1xuICB9KTtcbn07XG5cbmF2LmZsb2F0ID0gZnVuY3Rpb24gKGkpe1xuICByZXR1cm4gYXYoaSwgZnVuY3Rpb24oZCl7XG4gICAgaWYodHlwZW9mIGQgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyAnZCBpcyBub3QgYSBudW1iZXInO1xuICAgIH1cbiAgICByZXR1cm4gZDtcbiAgfSk7XG59O1xuXG5hdi5zdHJpbmcgPSBmdW5jdGlvbiAoaSl7XG4gIHJldHVybiBhdihpLCBmdW5jdGlvbiAoZCl7XG4gICAgaWYgKHR5cGVvZiBkID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGQ7XG4gICAgfSBlbHNlIHRocm93ICdkIGlzIG5vdCBhIHN0cmluZyc7XG4gIH0pO1xufTtcblxuYXYuY29sbGVjdGlvbiA9IGZ1bmN0aW9uIChpKXtcbiAgcmV0dXJuIGF2KGksIGZ1bmN0aW9uIChkKXtcbiAgICBpZiAoZCAmJiBkLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgcmV0dXJuIGQ7XG4gICAgfSBlbHNlIHRocm93ICdub3QgYW4gYXJyYXknO1xuICB9KTtcbn07XG5cbmF2Lm1hcCA9IGZ1bmN0aW9uIChpLCBvKXtcbiAgcmV0dXJuIGF2KGksIGZ1bmN0aW9uIChkKXtcbiAgICBpZiAodHlwZW9mIGQgPT09ICdvYmplY3QnKXtcbiAgICAgIHZhciBfaSA9IHt9O1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBvKXtcbiAgICAgICAgX2lbcHJvcF0gPSBvW3Byb3BdKGRbcHJvcF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9pO1xuICAgIH0gZWxzZSB0aHJvdyAnbm90IGEgdmFsaWQgb2JqZWN0JztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhdjtcblxuIiwiaW1wb3J0IGF2b2NhZG8gZnJvbSAnYXZvY2Fkby10eXBlLWNoZWNrZXIvaW5kZXgnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkMykge1xuICByZXR1cm4gZnVuY3Rpb24oaWQpIHtcbiAgICB2YXIgYXYgPSBhdm9jYWRvO1xuICAgIHZhciBhdXRvem9vbSA9IHRydWU7XG4gICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IDUwMDsgLy8gbXNcbiAgICB2YXIgcGkgPSBNYXRoLlBJO1xuICAgIHZhciB0YXUgPSAyICogcGk7XG4gICAgdmFyIHJhZGl1cyA9IGQzLnNjYWxlUG93KClcbiAgICAgICAgLmRvbWFpbihbMSwgMTBdKVxuICAgICAgICAucmFuZ2UoWzMsIDE1XSk7XG5cbiAgICB2YXIgc3Ryb2tlV2lkdGggPSAwLjU7XG5cbiAgICB2YXIgd3JhcHBlciA9IGQzLnNlbGVjdChpZCk7XG4gICAgdmFyIHdpZHRoID0gd3JhcHBlci5ub2RlKCkuY2xpZW50V2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IHdyYXBwZXIubm9kZSgpLmNsaWVudEhlaWdodDtcbiAgICB2YXIgc2l6ZSA9IFt3aWR0aCwgaGVpZ2h0XTtcblxuICAgIHZhciB0aWxlc0NvbmZpZyA9IHtcbiAgICAgIHVybDogJ2h0dHBzOi8vbWFwcy53aWtpbWVkaWEub3JnL29zbS1pbnRsLycsXG4gICAgICBleHRlbnNpb246ICcucG5nJyxcbiAgICAgIHN3aXRjaFhZOiBmYWxzZSxcbiAgICAgIGZhY3RvcjogMjU2XG4gICAgfTtcblxuICAgIHZhciBwcm9qZWN0aW9uID0gZDMuZ2VvTWVyY2F0b3IoKVxuICAgICAgICAuc2NhbGUoMSAvIHRhdSlcbiAgICAgICAgLnRyYW5zbGF0ZShbMCwgMF0pO1xuXG4gICAgdmFyIHBhdGggPSBkMy5nZW9QYXRoKClcbiAgICAgICAgLnByb2plY3Rpb24ocHJvamVjdGlvbik7ICBcblxuICAgIHZhciB0aWxlID0gZDMudGlsZSgpXG4gICAgICAgIC5zaXplKHNpemUpO1xuXG4gICAgdmFyIHpvb20gPSBkMy56b29tKClcbiAgICAgICAgLnNjYWxlRXh0ZW50KFsxIDw8IDksIDEgPDwgMTRdKVxuICAgICAgICAub24oJ3pvb20nLCB6b29tZWQpO1xuXG4gICAgdmFyIHN2ZyA9IHdyYXBwZXIuc2VsZWN0KCdzdmcnKTtcbiAgICBcbiAgICBpZiAoc3ZnLmVtcHR5KCkpIHtcbiAgICAgIHN2ZyA9IHdyYXBwZXIuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgIC5jbGFzc2VkKCdpbmZvdnl6LW1hcCcsIHRydWUpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgdmFyIHJhc3RlciA9IHN2Zy5hcHBlbmQoJ2cnKS5jbGFzc2VkKCd0aWxlcycsIHRydWUpO1xuICAgIHZhciB2ZWN0b3IgPSBzdmcuYXBwZW5kKCdnJykuY2xhc3NlZCgnb3ZlcmxheScsIHRydWUpO1xuICAgIHZhciBsZWdlbmQgPSBzdmcuYXBwZW5kKCdnJykuY2xhc3NlZCgnbGVnZW5kJywgdHJ1ZSk7XG5cbiAgICB2YXIgcHJldmlvdXNUcmFuc2Zvcm07XG4gICAgZnVuY3Rpb24gem9vbWVkKCkge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IHByZXZpb3VzVHJhbnNmb3JtID0gZDMuZXZlbnQudHJhbnNmb3JtO1xuXG4gICAgICB2YXIgdGlsZXMgPSB0aWxlXG4gICAgICAgICAgLnNjYWxlKHRyYW5zZm9ybS5rKVxuICAgICAgICAgIC50cmFuc2xhdGUoW3RyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueV0pXG4gICAgICAgICAgKCk7XG5cbiAgICAgIHZlY3RvclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcbiAgICAgIFxuICAgICAgdmVjdG9yLnNlbGVjdEFsbCgnY2lyY2xlLmFjdGl2ZScpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbihkKSB7IHJldHVybiAndHJhbnNsYXRlKCcgKyBwcm9qZWN0aW9uKGQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICsgJyknOyB9KVxuICAgICAgICAuYXR0cigncicsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gcmFkaXVzKGQucHJvcGVydGllcy52YWx1ZSB8fCAxKSAvIHRyYW5zZm9ybS5rO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgc3Ryb2tlV2lkdGggLyB0cmFuc2Zvcm0uayk7XG5cbiAgICAgIHZhciBpbWFnZSA9IHJhc3RlclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgc3RyaW5naWZ5KHRpbGVzLnNjYWxlLCB0aWxlcy50cmFuc2xhdGUpKVxuICAgICAgICAuc2VsZWN0QWxsKCdpbWFnZScpXG4gICAgICAgIC5kYXRhKHRpbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KTtcblxuICAgICAgaW1hZ2VcbiAgICAgICAgLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgaW1hZ2UuZW50ZXIoKS5hcHBlbmQoJ2ltYWdlJylcbiAgICAgICAgICAuYXR0cigneGxpbms6aHJlZicsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRpbGVzQ29uZmlnLnVybCArIGRbMl0gKyAnLycgKyBkWzBdICsgJy8nICsgZFsxXSArIHRpbGVzQ29uZmlnLmV4dGVuc2lvbjsgfSlcbiAgICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGRbMF0gKiB0aWxlc0NvbmZpZy5mYWN0b3I7IH0pXG4gICAgICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbihkKSB7IHJldHVybiBkWzFdICogdGlsZXNDb25maWcuZmFjdG9yOyB9KVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHRpbGVzQ29uZmlnLmZhY3RvcilcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgdGlsZXNDb25maWcuZmFjdG9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdpZnkoc2NhbGUsIHRyYW5zbGF0ZSkge1xuICAgICAgdmFyIGsgPSBzY2FsZSAvIHRpbGVzQ29uZmlnLmZhY3RvcjtcbiAgICAgIHZhciByID0gc2NhbGUgJSAxID8gTnVtYmVyIDogTWF0aC5yb3VuZDtcbiAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyByKHRyYW5zbGF0ZVswXSAqIHNjYWxlKSArICcsJyArIHIodHJhbnNsYXRlWzFdICogc2NhbGUpICsgJykgc2NhbGUoJyArIGsgKyAnKSc7XG4gICAgfVxuXG4gICAgdmFyIGxhdGl0dWRlID0gZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIGF2KGksIGZ1bmN0aW9uIChkKXtcbiAgICAgICAgdmFyIGwgPSBhdi5mbG9hdChkKSgpO1xuICAgICAgICBpZiAobCA8IC05MCB8fCBsID4gOTApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xhdGl0dWRlIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBsb25naXR1ZGUgPSBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gYXYoaSwgZnVuY3Rpb24gKGQpe1xuICAgICAgICB2YXIgbCA9IGF2LmZsb2F0KGQpKCk7XG4gICAgICAgIGlmIChsIDwgLTE4MCB8fCBsID4gMTgwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb25naXR1ZGUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIC0xODAgYW5kIDE4MC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgTG9jYXRpb24gPSBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gYXYubWFwKGksIHtcbiAgICAgICAgaWQ6IGF2LnN0cmluZyxcbiAgICAgICAgLy8gY29tbWVudGVkIGZvciBub3cgYmVjYXVzZSBleGFtcGxlcyB1c2UgZGF0YSB3aXRob3V0IHZhbHVlc1xuICAgICAgICAvLyBhbmQgYXZvY2FkbyBkb2Vzbid0IHN1cHBvcnQgb3B0aW9uYWwgYXR0cmlidXRlcyB5ZXQuXG4gICAgICAgIC8vIHZhbHVlOiBhdi5pbnQsXG4gICAgICAgIGxvbmdpdHVkZTogbG9uZ2l0dWRlLFxuICAgICAgICBsYXRpdHVkZTogbGF0aXR1ZGVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgdHJhbnNmb3JtRGF0YSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgIGZlYXR1cmVzOiBkLm1hcChmdW5jdGlvbihlbCkge1xuICAgICAgICAgIExvY2F0aW9uKGVsKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgICAgICAgICAgaWQ6IGVsLmlkLFxuICAgICAgICAgICAgcHJvcGVydGllczogZWwsXG4gICAgICAgICAgICBnZW9tZXRyeToge3R5cGU6ICdQb2ludCcsIGNvb3JkaW5hdGVzOiBbK2VsLmxvbmdpdHVkZSwgK2VsLmxhdGl0dWRlXX1cbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIG1hcCA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciBuZXdXaWR0aCA9IHdyYXBwZXIubm9kZSgpLmNsaWVudFdpZHRoO1xuICAgICAgdmFyIG5ld0hlaWdodCA9IHdyYXBwZXIubm9kZSgpLmNsaWVudEhlaWdodDtcbiAgICAgIHZhciBfdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuXG4gICAgICBpZiAod2lkdGggIT09IG5ld1dpZHRoIHx8IGhlaWdodCAhPT0gbmV3SGVpZ2h0KSB7XG4gICAgICAgIHdpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgIGhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgX3RyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgICAgIHN2Z1xuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZlY3Rvci5kYXR1bSgpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfdHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gKHR5cGVvZiBkICE9PSAndW5kZWZpbmVkJykgPyB0cmFuc2Zvcm1EYXRhKGQpIDogdmVjdG9yLmRhdHVtKCk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHByb2plY3RlZCBjZW50ZXIuXG4gICAgICB2YXIgYm91bmRzICA9IHBhdGguYm91bmRzKGRhdGEpO1xuICAgICAgdmFyIGJ4ID0gYm91bmRzWzFdWzBdIC0gYm91bmRzWzBdWzBdO1xuICAgICAgdmFyIGJ5ID0gYm91bmRzWzFdWzFdIC0gYm91bmRzWzBdWzFdO1xuICAgICAgdmFyIHR4ID0gKGJvdW5kc1swXVswXSArIGJvdW5kc1sxXVswXSkgLyAyO1xuICAgICAgdmFyIHR5ID0gKGJvdW5kc1swXVsxXSArIGJvdW5kc1sxXVsxXSkgLyAyO1xuICAgICAgdmFyIHNjYWxlID0gMC44ICogTWF0aC5taW4od2lkdGggLyBieCwgaGVpZ2h0IC8gYnkpO1xuXG4gICAgICBzdmcuY2FsbCh6b29tKTtcblxuICAgICAgaWYgKCFhdXRvem9vbSAmJiB0eXBlb2YgdmVjdG9yLmRhdHVtKCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN2Z1xuICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgem9vbS50cmFuc2Zvcm0sXG4gICAgICAgICAgICBkMy56b29tSWRlbnRpdHlcbiAgICAgICAgICAgICAgLnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpXG4gICAgICAgICAgICAgIC5zY2FsZSgxIDw8IDEwKVxuICAgICAgICAgICAgICAudHJhbnNsYXRlKDAsIDApXG4gICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF1dG96b29tKSB7XG4gICAgICAgIHN2Z1xuICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAuZHVyYXRpb24oX3RyYW5zaXRpb25EdXJhdGlvbilcbiAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgIHpvb20udHJhbnNmb3JtLFxuICAgICAgICAgICAgZDMuem9vbUlkZW50aXR5XG4gICAgICAgICAgICAgIC50cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKVxuICAgICAgICAgICAgICAuc2NhbGUoc2NhbGUpXG4gICAgICAgICAgICAgIC50cmFuc2xhdGUoLXR4LCAtdHkpXG4gICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmVjdG9yLmRhdHVtKGRhdGEpO1xuXG4gICAgICB2YXIgZmVhdHVyZXMgPSAodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnKSA/IGRhdGEuZmVhdHVyZXMgOiBbXTtcblxuICAgICAgdmFyIHZhbHVlRXh0ZW50ID0gZDMuZXh0ZW50KGZlYXR1cmVzLm1hcChmdW5jdGlvbihmKSB7XG4gICAgICAgIHJldHVybiBmLnByb3BlcnRpZXMudmFsdWUgfHwgMTtcbiAgICAgIH0pKTtcblxuICAgICAgcmFkaXVzID0gZDMuc2NhbGVQb3coKVxuICAgICAgICAuZG9tYWluKHZhbHVlRXh0ZW50KVxuICAgICAgICAucmFuZ2UoWzMsIDE1XSk7XG5cbiAgICAgIHZhciBidWJibGUgPSB2ZWN0b3JcbiAgICAgICAgLnNlbGVjdEFsbCgnY2lyY2xlJylcbiAgICAgICAgLmRhdGEoZmVhdHVyZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuaWQ7IH0pO1xuXG4gICAgICBidWJibGVcbiAgICAgICAgLmV4aXQoKVxuICAgICAgICAuY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmF0dHIoJ3InLCAwKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMClcbiAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICBzY2FsZSA9IChwcmV2aW91c1RyYW5zZm9ybSkgPyBwcmV2aW91c1RyYW5zZm9ybS5rIDogc2NhbGU7XG4gICAgICBidWJibGUuZW50ZXIoKS5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgIC5jbGFzc2VkKCdhY3RpdmUnLCB0cnVlKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZCkgeyByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgcHJvamVjdGlvbihkLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSArICcpJzsgfSlcbiAgICAgICAgLmF0dHIoJ3InLCAwKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMClcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuYXR0cigncicsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gcmFkaXVzKGQucHJvcGVydGllcy52YWx1ZSB8fCAxKSAvIHNjYWxlO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgc3Ryb2tlV2lkdGggLyBzY2FsZSk7XG5cbiAgICAgIGxlZ2VuZFxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgKHdpZHRoIC0gcmFkaXVzKHZhbHVlRXh0ZW50WzFdKSAtIDEwKSArICcsJyArIChoZWlnaHQgLSAxMCkgKyAnKScpO1xuXG4gICAgICB2YXIgbGVnZW5kRWxlbWVudCA9IGxlZ2VuZC5zZWxlY3RBbGwoJ2cnKVxuICAgICAgICAuZGF0YSh2YWx1ZUV4dGVudClcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKCdnJyk7XG5cbiAgICAgIGxlZ2VuZEVsZW1lbnQuYXBwZW5kKCdjaXJjbGUnKTtcblxuICAgICAgbGVnZW5kLnNlbGVjdEFsbCgnY2lyY2xlJylcbiAgICAgICAgLmRhdGEodmFsdWVFeHRlbnQpXG4gICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIC0ocmFkaXVzKGQpKTsgfSlcbiAgICAgICAgLmF0dHIoJ3InLCBmdW5jdGlvbihkKSB7IHJldHVybiByYWRpdXMoZCk7IH0pO1xuXG4gICAgICBsZWdlbmRFbGVtZW50LmFwcGVuZCgndGV4dCcpO1xuXG4gICAgICBsZWdlbmQuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgICAgLmRhdGEodmFsdWVFeHRlbnQpXG4gICAgICAgIC5hdHRyKCd5JywgZnVuY3Rpb24oZCkgeyByZXR1cm4gLTIgKiAocmFkaXVzKGQpKTsgfSlcbiAgICAgICAgLmF0dHIoJ2R5JywgZnVuY3Rpb24oKSB7IHJldHVybiAnLS4yZW0nOyB9KVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKXsgcmV0dXJuIGQ7IH0pO1xuXG4gICAgICByZXR1cm4gbWFwO1xuICAgIH07XG5cbiAgICBtYXAucGFuVG8gPSBmdW5jdGlvbihkKSB7XG4gICAgICBpZiAodHlwZW9mIGQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWFwLnBhblRvKCkgY2FsbGVkIHdpdGhvdXQgbG9jYXRpb24uJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZC5sb25naXR1ZGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBkLmxhdGl0dWRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcC5wYW5UbygpIGNhbGxlZCB3aXRob3V0IHZhbGlkIGxvY2F0aW9uLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdCA9IHByb2plY3Rpb24oW2QubG9uZ2l0dWRlLCBkLmxhdGl0dWRlXSk7XG4gICAgICB2YXIgeiA9IGQuem9vbSB8fCAxMDtcbiAgICAgIHN2Z1xuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbih0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICAgIC5jYWxsKFxuICAgICAgICAgIHpvb20udHJhbnNmb3JtLFxuICAgICAgICAgIGQzLnpvb21JZGVudGl0eVxuICAgICAgICAgICAgLnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpXG4gICAgICAgICAgICAuc2NhbGUoMSA8PCB6KVxuICAgICAgICAgICAgLnRyYW5zbGF0ZSgtdFswXSwgLXRbMV0pXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIG1hcC5hdXRvem9vbSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gYXV0b3pvb207XG4gICAgICBhdXRvem9vbSA9IGQ7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH07XG5cbiAgICBtYXAudHJhbnNpdGlvbkR1cmF0aW9uID0gZnVuY3Rpb24oZCkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBkO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcbn1cbiIsImltcG9ydCBtYXAgZnJvbSAnLi9zcmMvbWFwJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB2ZXJzaW9uOiAnMS4wLjAtYmV0YS43JyxcbiAgbWFwOiBtYXBcbn07XG4iXSwibmFtZXMiOlsiYXYiLCJhdm9jYWRvIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUlBLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQzs7RUFFN0IsSUFBSSxFQUFFLENBQUM7O0VBRVAsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7TUFDckIsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLENBQUM7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
